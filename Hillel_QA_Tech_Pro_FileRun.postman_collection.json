{
	"info": {
		"_postman_id": "3aee9df7-f095-4454-8e8c-c67c230d0064",
		"name": "Hillel_QA_Tech_Pro_FileRun",
		"description": "Навчальна колеція запитів - Hillel IT School - курс QA Technical Pro",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "41630809"
	},
	"item": [
		{
			"name": "NegativeTestsRUN",
			"item": [
				{
					"name": "LogOut_ForRUN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {\r",
									"    return new Error(\"Logout is failed \" + pm.response.code);\r",
									"}\r",
									"\r",
									"let jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"Перевірка статусу відповіді\", function () {\r",
									"    console.log(\"Отриманий статус:\", jsonData.status);\r",
									"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"var\", pm.iterationData.get(\"variant\"));\r",
									"\r",
									"var run = pm.collectionVariables.get(\"var\")\r",
									"console.log(run == 1);\r",
									"if(run === 1){\r",
									"    pm.execution.setNextRequest(\"CreateNewUser_NoName_run\");\r",
									"} \r",
									"else if(run == 2){\r",
									"pm.execution.setNextRequest(\"CreateNewUser_NoEmail_run\");\r",
									"}\r",
									"else if(run == 3){\r",
									"pm.execution.setNextRequest(\"CreateNewUser_BadPass_run\");\r",
									"}\r",
									"else if(run == 4){\r",
									"pm.execution.setNextRequest(\"EmptyBodyRequest_run\");\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"var\", pm.iterationData.get(\"variant\"));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{url}}/auth/logout",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewUser_NoName_run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"\r",
									"const bodyobject = {\r",
									"  \"name\": \"{{UserName}}\",\r",
									"  \"lastName\": \"\",\r",
									"  \"email\": \"{{UserEmail}}\",\r",
									"  \"password\": \"{{UserPassword}}\",\r",
									"  \"repeatPassword\": \"{{UserPassword}}\"\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"body\", JSON.stringify(bodyobject));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\\\"lastName\\\" is not allowed to be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ul}}/auth/signup",
							"host": [
								"{{ul}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewUser_NoEmail_run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.collectionVariables.set(\"UserPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"\\\"email\\\" is not allowed to be empty\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UserName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"\",\r\n  \"password\": \"{{UserPassword}}\",\r\n  \"repeatPassword\": \"{{UserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ul}}/auth/signup",
							"host": [
								"{{ul}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateNewUser_BadPass_run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.collectionVariables.set(\"UserPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Passwords do not match\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UserName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{UserEmail}}\",\r\n  \"password\": \"{{UserPassword}}\",\r\n  \"repeatPassword\": \"12345\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ul}}/auth/signup",
							"host": [
								"{{ul}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "EmptyBodyRequest_run",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.collectionVariables.set(\"UserPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.status).to.eql(\"error\");\r",
									"});\r",
									"var jsonObject = xml2Json(responseBody);\r",
									"pm.test(\"Your test name\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Name is required\");\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ul}}/auth/signup",
							"host": [
								"{{ul}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "CreatUserRUN",
			"item": [
				{
					"name": "CreateDefaultUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.variables.replaceIn(\"{{$randomFirstName}}\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.variables.replaceIn(\"{{$randomLastName}}\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.variables.replaceIn(\"{{$randomEmail}}\"));\r",
									"pm.collectionVariables.set(\"UserPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));\r",
									"\r",
									"const emailPattern = /\\b[a-zA-Z_\\.\\d]+@[a-zA-Z]+\\.[a-zA-Z]{2,4}\\b/g;\r",
									"\r",
									"pm.test(\"Email have true format\", function () {\r",
									"    let email = pm.collectionVariables.get(\"UserEmail\")\r",
									"    pm.expect(email).to.be.a(\"string\");\r",
									"    pm.expect(email).match(emailPattern);\r",
									"});\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 201) {\r",
									"    throw new Error(\"Status Code Failed = \" + pm.response.code)\r",
									"}\r",
									"\r",
									"const expectSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"photoFilename\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"distanceUnits\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userId\",\r",
									"                \"photoFilename\",\r",
									"                \"distanceUnits\",\r",
									"                \"currency\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"status\",\r",
									"        \"data\"\r",
									"    ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"\r",
									"pm.test(\"JSON data Valid to Schema\", function () {\r",
									"    pm.expect(jsonData).to.have.jsonSchema(expectSchema);\r",
									"});\r",
									"\r",
									"pm.collectionVariables.set(\"UserID\", jsonData.data.userId);\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"name\": \"{{UserName}}\",\r\n  \"lastName\": \"{{lastName}}\",\r\n  \"email\": \"{{UserEmail}}\",\r\n  \"password\": \"{{UserPassword}}\",\r\n  \"repeatPassword\": \"{{UserPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "EditUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"if (pm.response.code !== 200) {\r",
									"    throw new Error(\"Status Code Failed = \" + pm.response.code)\r",
									"}\r",
									"else {\r",
									"    let responseData = pm.response.json();\r",
									"    let requestData = pm.request.body ? JSON.parse(pm.request.body.raw) : {};\r",
									"    let moment = require('moment');\r",
									"    let formattedResponseDate = moment(responseData.data.dateBirth).format(\"YYYY-MM-D\");\r",
									"    let RegExDate = /^\\d{4}-\\d{2}-\\d{1,2}$/;\r",
									"\r",
									"    pm.test(\"Name з Відповідь ідентична запиту\", function () {\r",
									"        pm.expect(requestData.name).to.deep.equal(responseData.data.name);\r",
									"    });\r",
									"    pm.test(\"LastName з Відповідь ідентична запиту\", function () {\r",
									"        pm.expect(requestData.lastName).to.deep.equal(responseData.data.lastName);\r",
									"    });\r",
									"    pm.test(\"Country з Відповідь ідентична запиту\", function () {\r",
									"        pm.expect(requestData.country).to.deep.equal(responseData.data.country);\r",
									"    });\r",
									"    pm.test(\"Формат Дати з Відповідь ідентична запиту\", function () {\r",
									"        pm.expect(formattedResponseDate).to.match(RegExDate);\r",
									"    });\r",
									"\r",
									"\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.iterationData.get(\"uname\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.iterationData.get(\"ulname\"));\r",
									"pm.collectionVariables.set(\"dateBirth\", pm.iterationData.get(\"udbirthd\"));\r",
									"pm.collectionVariables.set(\"country\", pm.iterationData.get(\"ucountry\"));\r",
									"\r",
									"var bodyObject = {\r",
									"  \"photo\": \"avatar144.png\",\r",
									"  \"name\": \"{{UserName}}\",\r",
									"  \"lastName\": \"{{lastName}}\",\r",
									"  \"dateBirth\": \"{{dateBirth}}\",\r",
									"  \"country\": \"{{country}}\"\r",
									"}\r",
									"\r",
									"pm.collectionVariables.set(\"body\", JSON.stringify(bodyObject));\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"photo\": \"avatar144.png\",\r\n  \"name\": \"Dradada\",\r\n  \"lastName\": \"Klause\",\r\n  \"dateBirth\": \"2021-03-17T15:21:05.000Z\",\r\n  \"country\": \"Ukraine\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/users/profile",
							"host": [
								"{{url}}"
							],
							"path": [
								"users",
								"profile"
							],
							"query": [
								{
									"key": "foto",
									"value": null,
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "NewUserRUN",
			"item": [
				{
					"name": "CreateNewUser",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.set(\"UserName\", pm.iterationData.get(\"name\"));\r",
									"pm.collectionVariables.set(\"lastName\", pm.iterationData.get(\"lname\"));\r",
									"pm.collectionVariables.set(\"UserEmail\", pm.iterationData.get(\"uemail\"));\r",
									"pm.collectionVariables.set(\"UserPassword\", pm.iterationData.get(\"upassword\"));\r",
									"pm.collectionVariables.set(\"body\", JSON.stringify(bodyObject));\r",
									"\r",
									"const emailPattern = /\\b[a-zA-Z_\\.\\d]+@[a-zA-Z]+\\.[a-zA-Z]{2,4}\\b/g;\r",
									"\r",
									"pm.test(\"Email have true format\", function () {\r",
									"    let email = pm.collectionVariables.get(\"UserEmail\")\r",
									"    pm.expect(email).to.be.a(\"string\");\r",
									"    pm.expect(email).match(emailPattern);\r",
									"});\r",
									"\r",
									"var bodyObject = {\r",
									"  \"name\": \"{{UserName}}\",\r",
									"  \"lastName\": \"{{lastName}}\",\r",
									"  \"email\": \"{{UserEmail}}\",\r",
									"  \"password\": \"{{UserPassword}}\",\r",
									"  \"repeatPassword\": \"{{UserPassword}}\"\r",
									"}\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const expectSchema = {\r",
									"    \"type\": \"object\",\r",
									"    \"properties\": {\r",
									"        \"status\": {\r",
									"            \"type\": \"string\"\r",
									"        },\r",
									"        \"data\": {\r",
									"            \"type\": \"object\",\r",
									"            \"properties\": {\r",
									"                \"userId\": {\r",
									"                    \"type\": \"integer\"\r",
									"                },\r",
									"                \"photoFilename\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"distanceUnits\": {\r",
									"                    \"type\": \"string\"\r",
									"                },\r",
									"                \"currency\": {\r",
									"                    \"type\": \"string\"\r",
									"                }\r",
									"            },\r",
									"            \"required\": [\r",
									"                \"userId\",\r",
									"                \"photoFilename\",\r",
									"                \"distanceUnits\",\r",
									"                \"currency\"\r",
									"            ]\r",
									"        }\r",
									"    },\r",
									"    \"required\": [\r",
									"        \"status\",\r",
									"        \"data\"\r",
									"    ]\r",
									"}\r",
									"var jsonData = pm.response.json();\r",
									"let emptyname = pm.collectionVariables.get(\"UserName\");\r",
									"\r",
									"if (emptyname === \"\") {\r",
									"    pm.test(\"Status code is 400\", function () {\r",
									"        pm.response.to.have.status(400);\r",
									"    });\r",
									"\r",
									"    pm.test(\"Empty name test status\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.status).to.eql(\"error\");\r",
									"    });\r",
									"\r",
									"    pm.test(\"Empty name test message\", function () {\r",
									"        var jsonData = pm.response.json();\r",
									"        pm.expect(jsonData.message).to.eql(\"\\\"name\\\" is not allowed to be empty\");\r",
									"    });\r",
									"} else if (pm.response.code == 201) {\r",
									"    pm.collectionVariables.set(\"UserID\", jsonData.data.userId);\r",
									"    pm.test(\"JSON data Valid to Schema\", function () {\r",
									"    pm.expect(jsonData).to.have.jsonSchema(expectSchema);\r",
									"});\r",
									"} else {\r",
									"    if (pm.response.code !== 201) {\r",
									"        throw new Error(\"Status Code Failed = \" + pm.response.code)\r",
									"    }\r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{body}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/auth/signup",
							"host": [
								"{{url}}"
							],
							"path": [
								"auth",
								"signup"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteUser",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{url}}/users",
							"host": [
								"{{url}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "LogOut",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 200) {\r",
							"    return new Error(\"Logout is failed \" + pm.response.code);\r",
							"}\r",
							"\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Перевірка статусу відповіді\", function () {\r",
							"    console.log(\"Отриманий статус:\", jsonData.status);\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/auth/logout",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignIn",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 200) {\r",
							"    throw new Error(\"Status Code Failed = \" + pm.response.code)\r",
							"}\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Перевірка статусу відповіді\", function () {\r",
							"    console.log(\"Отриманий статус:\", jsonData.status);\r",
							"    pm.expect(jsonData.status).to.eql(\"ok\");\r",
							"});\r",
							"\r",
							"pm.test(\"Перевірка у відповіді User ID \", function () {\r",
							"    pm.expect(jsonData.data.userId).to.eql(pm.collectionVariables.get(\"UserID\"));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{UserEmail}}\",\r\n  \"password\": \"{{UserPassword}}\",\r\n  \"remember\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/auth/signin",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.code !== 200) {\r",
							"    throw new Error(\"Status Code Failed = \" + pm.response.code)\r",
							"}\r",
							"\r",
							"pm.test(\"Валідація відповіді на тип даних\", function () {\r",
							"    let responseData = pm.response.json();\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.status).to.be.a('string');\r",
							"    pm.expect(responseData.data).to.be.an('object');\r",
							"    pm.expect(responseData.data.userId).to.be.a('number');\r",
							"    pm.expect(responseData.data.photoFilename).to.be.a('string');\r",
							"    pm.expect(responseData.data.name).to.be.a('string');\r",
							"    pm.expect(responseData.data.lastName).to.be.a('string');\r",
							"    pm.expect(responseData.data.dateBirth).to.be.a('string');\r",
							"    pm.expect(responseData.data.country).to.be.a('string');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/users/profile",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						"profile"
					]
				}
			},
			"response": []
		},
		{
			"name": "ChangeUserPassword",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set(\"NewUserPassword\", pm.variables.replaceIn(\"{{$randomPassword}}\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Retun valid User ID \", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    //console.log(pm.collectionVariables.get(\"UserID\"));\r",
							"    //console.log(jsonData.data.userId);\r",
							"    pm.expect(jsonData.data.userId).to.eql(pm.collectionVariables.get(\"UserID\"));\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"oldPassword\": \"{{UserPassword}}\",\r\n  \"password\": \"{{NewUserPassword}}\",\r\n  \"repeatPassword\": \"{{NewUserPassword}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/password",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "LogOutForNewPassLogin",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/auth/logout",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth",
						"logout"
					]
				}
			},
			"response": []
		},
		{
			"name": "SignInWihtNewPassword",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"email\": \"{{UserEmail}}\",\r\n  \"password\": \"{{NewUserPassword}}\",\r\n  \"remember\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/auth/signin",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"auth",
						"signin"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCarBrands",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/cars/brands",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"cars",
						"brands"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCarModels",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/cars/models",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"cars",
						"models"
					]
				}
			},
			"response": []
		},
		{
			"name": "UserSetings(unit of measurement)",
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"currency\": \"usd\",\r\n  \"distanceUnits\": \"km\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/settings",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						"settings"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateNewCar",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData=pm.response.json();\r",
							"pm.collectionVariables.set(\"CarID\", responseData.data.id);\r",
							"//console.log(pm.collectionVariables.get(\"CarID\"));"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 4,\r\n  \"carModelId\": 18,\r\n  \"mileage\": 49500\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/cars",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetUserCars",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/cars",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"cars"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetCarByID",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let responseData=pm.response.json();\r",
							"pm.collectionVariables.set(\"CarMileage\", responseData.data.mileage);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}//cars/{{CarID}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"",
						"cars",
						"{{CarID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "EditCar",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let Millage = parseInt(pm.collectionVariables.get(\"CarMileage\"), 10) + 150;\r",
							"//console.log(Millage);\r",
							"pm.collectionVariables.set(\"ActualMileage\", pm.variables.replaceIn(Millage));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carBrandId\": 4,\r\n  \"carModelId\": 18,\r\n  \"mileage\": {{ActualMileage}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/cars/{{CarID}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"cars",
						"{{CarID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "CreateExpense",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let NewMillage = parseInt(pm.collectionVariables.get(\"ActualMileage\"), 10) + 150;\r",
							"//console.log(Millage);\r",
							"pm.collectionVariables.set(\"NewMileage\", pm.variables.replaceIn(NewMillage));\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"carId\": {{CarID}},\r\n  \"reportedAt\": \"{{$isoTimestamp}}\",\r\n  \"mileage\": {{NewMileage}},\r\n  \"liters\": 12,\r\n  \"totalCost\": 12,\r\n  \"forceMileage\": false\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/expenses",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"expenses"
					]
				}
			},
			"response": []
		}
	],
	"variable": [
		{
			"key": "UserName",
			"value": ""
		},
		{
			"key": "lastName",
			"value": ""
		},
		{
			"key": "UserEmail",
			"value": ""
		},
		{
			"key": "UserPassword",
			"value": ""
		},
		{
			"key": "NewUserPassword",
			"value": ""
		},
		{
			"key": "CarID",
			"value": ""
		},
		{
			"key": "NewMileage",
			"value": ""
		},
		{
			"key": "CarMileage",
			"value": ""
		},
		{
			"key": "ActualMileage",
			"value": ""
		},
		{
			"key": "Responce",
			"value": ""
		},
		{
			"key": "UserID",
			"value": ""
		},
		{
			"key": "body",
			"value": ""
		},
		{
			"key": "var",
			"value": ""
		},
		{
			"key": "dateBirth",
			"value": ""
		},
		{
			"key": "country",
			"value": ""
		}
	]
}